---

- become: true
  block:

  - name: Assert that an admin email has been set
    assert:
      that:
        - "nginx_proxy_admin_email != '' "

  - name: Install Nginx and other packages
    package:
      name: "{{ item }}"
      state: present
    loop:
      - nginx
      - certbot

  - name: Create directories
    file:
      path: "{{ item }}"
      owner: nginx
      group: nginx
      mode: 0755
      state: directory
    loop:
      - /data/www
      - /data/www/certbot

  - name: Open firewall for HTTP and HTTPS
    firewalld:
      service: "{{ item }}"
      state: enabled
      permanent: true
      immediate: true
    loop:
      - http
      - https

  - name: Generate dhparams
    shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
    args:
      creates: /etc/nginx/dhparams.pem

  - name: Copy Nginx config file
    template:
      src: "nginx.conf.j2"
      dest: "/etc/nginx/nginx.conf"
      backup: yes
    register: nginx_conf_result

  - name: Restart Nginx when nginx.conf changes
    systemd:
      name: nginx.service
      state: restarted
    when: nginx_conf_result is changed

  - name: Run Certbot to obtain SSL certs for each site
    shell: >
        certbot certonly -n --webroot -w /data/www/certbot 
        -m {{ nginx_proxy_admin_email }} 
        --agree-tos -d {{ item.domain_name }} 
        {% if 'aliases' in item %}
        {% for d in item.aliases %}-d {{d}} {% endfor %}
        {% endif %}
    args:
      creates: "/etc/letsencrypt/live/{{ item.domain_name }}"
    when: "'cert_path' not in item or 'key_path' not in item"
    loop: "{{ nginx_proxy_sites }}"

  - name: Copy the site config files
    template:
      src: "site.conf.j2"
      dest: "/etc/nginx/conf.d/{{ item.domain_name }}.conf"
    register: site_conf_result
    loop: "{{ nginx_proxy_sites }}"

  - name: Write any passwd files
    copy:
      dest: "/etc/nginx/{{ item.domain_name }}.passwdfile"
      owner: 'nginx'
      mode: 0700
      content: "{{ item.auth_config.content }}"
    when: "'auth_config' in item"
    loop: "{{ nginx_proxy_sites }}"

  - name: Restart Nginx when site configs change
    systemd:
      name: nginx.service
      state: restarted
    when: site_conf_result is changed

  - name: Enable Nginx
    systemd:
      name: nginx.service
      enabled: yes

  - name: Add cronjob to renew certificates
    cron:
      name: "Certbot renewal"
      special_time: monthly
      job: "certbot renew --deploy-hook 'systemctl restart nginx.service'"

